-- MySQL dump 10.13  Distrib 8.0.33, for Win64 (x86_64)
--
-- Host: 127.0.0.1    Database: thesis
-- ------------------------------------------------------
-- Server version	8.0.33

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `messages`
--

DROP TABLE IF EXISTS `messages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `messages` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name_surname` varchar(200) NOT NULL,
  `email` varchar(150) NOT NULL,
  `message` mediumtext NOT NULL,
  `received_date` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `messages`
--

LOCK TABLES `messages` WRITE;
/*!40000 ALTER TABLE `messages` DISABLE KEYS */;
INSERT INTO `messages` VALUES (2,'yigit ersoz','y-ersoz@hotmail.com','demo','2024-03-27 20:29:11');
/*!40000 ALTER TABLE `messages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `questions`
--

DROP TABLE IF EXISTS `questions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `questions` (
  `id` int NOT NULL AUTO_INCREMENT,
  `instructions` text NOT NULL,
  `solution` text NOT NULL,
  `test_case` text,
  `title` varchar(145) NOT NULL,
  `slug` varchar(145) NOT NULL,
  `results` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `questions`
--

LOCK TABLES `questions` WRITE;
/*!40000 ALTER TABLE `questions` DISABLE KEYS */;
INSERT INTO `questions` VALUES (4,'In this task you have to add 2 integers and return it.','#include <iostream>\r\n\r\nint add(int number1, number2){\r\n\r\n}','int main(){\r\n	std::cout << add(3,5) << std::endl;\r\n	std::cout << add(0,0) << std::endl;\r\n	std::cout << add(-7,-3) << std::endl;\r\n	std::cout << add(-1,5) << std::endl;\r\n	std::cout << add(14,-11) << std::endl;\r\n}','Question 1 - Add 2 Integers','question-1-add-2-integers','8\r\n0\r\n-10\r\n4\r\n3\r\n'),(5,'In this task you have to multiply given 2 inregers and then as a next step cast it smallest integer.','#include <iostream>\r\n\r\nint multi(float n1, float n2){\r\n\r\n}','int main(){\r\n	std::cout << multi(3,5) << std::endl;\r\n	std::cout << multi(0,0) << std::endl;\r\n	std::cout << multi(-7,-3) << std::endl;\r\n	std::cout << multi(-1,5) << std::endl;\r\n	std::cout << multi(14,-11) << std::endl;\r\n}		','Question 2 - Multiply 2 Doubles and Cast it ','question-2-multiply-2-doubles-and-cast-it','15\r\n0\r\n21\r\n-5\r\n-154		'),(6,'There are 2 double numbers given. Your job is divede them and return. ','#include <iostream>\r\n\r\nint test(float n1, float n2){\r\n\r\n}','int main(){\r\n	std::cout << add(8,4) << std::endl;\r\n	std::cout << add(6,2) << std::endl;\r\n}','Question 3 ','question-3','2\r\n3');
/*!40000 ALTER TABLE `questions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `solved_questions`
--

DROP TABLE IF EXISTS `solved_questions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `solved_questions` (
  `id` int NOT NULL AUTO_INCREMENT,
  `student_id` int NOT NULL,
  `question_id` int NOT NULL,
  `code` text NOT NULL,
  `date` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `solved_questions`
--

LOCK TABLES `solved_questions` WRITE;
/*!40000 ALTER TABLE `solved_questions` DISABLE KEYS */;
INSERT INTO `solved_questions` VALUES (1,5,44,'#include <iostream>\n\nint add(int n1, int n2){\n	return n2 + n1;\n}','2024-05-14 00:43:18'),(2,5,4,'#include <iostream>\n\nint add(int number1,int number2){\n	return number1 + number2;\n}','2024-05-21 13:27:58'),(3,1,4,'#include <iostream>\nint add(int number1,  number2){\n	return number1 + number2;\n}','2024-05-15 15:13:55'),(4,1,5,'#include <iostream>\n\nint multi(float n1, float n2){\n 	return a;\n}','2024-05-15 15:05:11');
/*!40000 ALTER TABLE `solved_questions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `students`
--

DROP TABLE IF EXISTS `students`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `students` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `surname` varchar(100) NOT NULL,
  `email` varchar(200) NOT NULL,
  `password` varchar(25) NOT NULL,
  `type` enum('student','admin') DEFAULT 'student',
  `special_key` varchar(150) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `email_UNIQUE` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `students`
--

LOCK TABLES `students` WRITE;
/*!40000 ALTER TABLE `students` DISABLE KEYS */;
INSERT INTO `students` VALUES (1,'test_name','test_surname','test@gmail.com','test123','student','6d502cba-1162-11ef-a2e0-04d4c4debbaa'),(2,'asd','123','123@gmail.com','123','student','6d505d59-1162-11ef-a2e0-04d4c4debbaa'),(4,'123','123','test2@gmail.com','123','student','6d505f1e-1162-11ef-a2e0-04d4c4debbaa'),(5,'Mustafa YiÄŸit','Ersoz','yigit3588@gmail.com','yigit123','admin','29d722ab-3df4-4455-966e-20de1c33cc86'),(6,'Doruk','Gunay','dorukkgunayy@gmail.com','doruk123','student','6d50618d-1162-11ef-a2e0-04d4c4debbaa'),(7,'Tekin','POLAT','tekin.polat.dpu@gmail.com','lwe378tek','student','6d506234-1162-11ef-a2e0-04d4c4debbaa');
/*!40000 ALTER TABLE `students` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `topics`
--

DROP TABLE IF EXISTS `topics`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `topics` (
  `id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(120) NOT NULL,
  `content` mediumtext NOT NULL,
  `slug` varchar(120) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=52 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `topics`
--

LOCK TABLES `topics` WRITE;
/*!40000 ALTER TABLE `topics` DISABLE KEYS */;
INSERT INTO `topics` VALUES (28,'What Is Variable','<p class=\"fs-4\">\r\nVariables are the names used to store information in your program\'s memory. <br>\r\nAs your program runs, you can assign values to these variables. <br>\r\nVariables are the fundamental building blocks used to store information in computer programs. <br>\r\nAs your programs become more complex, variables play a larger role, providing functionality and flexibility to your program.\r\n</p>\r\n','what-is-variable'),(29,'Data Types','<p class=\"fs-4\">\r\nThey are structural elements used to represent different types of data in computer programs. In programming languages like C++, there are various data types.\r\n</p>\r\n\r\n<p class=\"fs-4\">\r\n<b>1. Integers:</b> Integers represent non-fractional positive or negative numbers. In C++, they are defined with the keyword int. There are different types for integers of different sizes: short, int, long. It is more appropriate to use short for smaller numbers and long for larger numbers.\r\n</p>\r\n\r\n<pre class=\"fs-5\"><code class=\"language-cpp\">\r\nint integerNumber = 10;\r\n</code></pre>\r\n\r\n<p class=\"fs-4\">\r\n<b>2. Floating-Point Numbers:</b> Floating-point numbers represent numbers with a decimal point. In C++, they are defined using the keywords float or double. Float provides lower precision while double provides higher precision.\r\n</p>\r\n\r\n<pre class=\"fs-5\"><code class=\"language-cpp\">\r\nfloat floatingNumber = 3.14;\r\n</code></pre>\r\n\r\n<p class=\"fs-4\">\r\n<b>3. Characters:</b> Characters represent a single character. In C++, they are defined using the char keyword. A single character is defined within single quotes.\r\n</p>\r\n\r\n<pre class=\"fs-5\"><code class=\"language-cpp\">\r\nchar character = \'A\';\r\n</code></pre>\r\n\r\n<p class=\"fs-4\">\r\n<b>4. Boolean Values:</b> Boolean values represent true or false states. In C++, they are defined using the bool keyword. They can only have two values: true or false.\r\n</p>\r\n\r\n<pre class=\"fs-5\"><code class=\"language-cpp\">\r\nbool isTrue = true;\r\n</code></pre>\r\n','data-types'),(31,'Variable Declaration and Naming Conventions','<p class=\"fs-4\">\r\nWhen defining variables in a program, certain rules must be followed. In the C++ programming language, briefly explaining the rules for variable declaration and naming:\r\n</p>\r\n\r\n<pre class=\"fs-4\"><code class=\"language-cpp\">\r\ndata_type variable_name = value;\r\n\r\nint number = 8;\r\n</code></pre>\r\n\r\n<p class=\"fs-4\">\r\nHere, <code>int</code> represents the data type of the variable (integer). <code>number</code> represents the name of the variable, and <code>8</code> represents the initial value of the variable.\r\n</p>\r\n\r\n<p class=\"fs-4\">\r\n<b>Variable Naming Rules:</b>\r\n</p>\r\n\r\n<ul class=\"fs-4\">\r\n  <li>- Variable names must start with a letter (a-z or A-Z), digit (0-9), or underscore (_).</li>\r\n  <li>- Variable names can only contain letters, digits, and underscores.</li>\r\n  <li>- Variable names are case-sensitive. So, <code>variable</code>, <code>Variable</code>, and <code>VARIABLE</code> are different variables.</li>\r\n  <li>- C++ keywords (such as int, float, while, for, etc.) cannot be used as variable names.</li>\r\n</ul>','variable-declaration-and-naming-conventions'),(32,'Variable Assignment','<p class=\"fs-4\">\r\nAssigning a value to a variable is the process of replacing its value in memory with a specific data. In the C++ programming language, variable assignment is straightforward as demonstrated below:\r\n</p>\r\n\r\n<p class=\"fs-4\"><b>EXAMPLE 1:</b></p>\r\n<pre class=\"fs-4\"><code class=\"language-cpp\">\r\nint number; // Variable declaration\r\nnumber = 10; // Assignment\r\n</code></pre>\r\n\r\n<p class=\"fs-4\">\r\nIn this example, we first declare an integer variable named <code>number</code>. Then, we assign the value 10 to the <code>number</code> variable.\r\n</p>\r\n\r\n<p class=\"fs-4\"><b>EXAMPLE 2:</b></p>\r\n<pre class=\"fs-4\"><code class=\"language-cpp\">\r\nint number = 20; // Variable declaration with assignment\r\n</code></pre>\r\n\r\n<p class=\"fs-4\">\r\nHere, the <code>number</code> variable is declared and initialized with a starting value of 20.\r\n</p>\r\n\r\n<p class=\"fs-4\"><b>EXAMPLE 3:</b></p>\r\n<pre class=\"fs-4\"><code class=\"language-cpp\">\r\nint x = 5;\r\nint y = x; // Assigning the value of x to y\r\n</code></pre>\r\n\r\n<p class=\"fs-4\">\r\nIn this case, the value of the <code>x</code> variable is assigned to the <code>y</code> variable. As a result, the value of <code>y</code> will also be 5.\r\n</p>\r\n\r\n<p class=\"fs-4\">\r\nWhen assigning the value of one variable to another, the data types must be compatible. For example, you need to perform type conversion when assigning an <code>int</code> to a <code>char</code> variable.\r\n</p>','variable-assignment'),(33,'Arithmetic Operators','<p class=\"fs-4\">\r\nArithmetic operators are used to perform mathematical operations.\r\n</p>\r\n\r\n<p class=\"fs-4\"><b>1. Addition (+):</b></p>\r\n<pre class=\"fs-4\"><code class=\"language-cpp\">\r\nint sum = 5 + 3; // sum = 8\r\n</code></pre>\r\n\r\n<p class=\"fs-4\"><b>2. Subtraction (-):</b></p>\r\n<pre class=\"fs-4\"><code class=\"language-cpp\">\r\nint difference = 7 - 4; // difference = 3\r\n</code></pre>\r\n\r\n<p class=\"fs-4\"><b>3. Multiplication (*):</b></p>\r\n<pre class=\"fs-4\"><code class=\"language-cpp\">\r\nint product = 6 * 2; // product = 12\r\n</code></pre>\r\n\r\n<p class=\"fs-4\"><b>4. Division (/):</b></p>\r\n<pre class=\"fs-4\"><code class=\"language-cpp\">\r\nfloat division = 10 / 3; // division = 3.33333 \r\n</code></pre>\r\n\r\n<p class=\"fs-4\"><b>5. Modulus (%):</b></p>\r\n<pre class=\"fs-4\"><code class=\"language-cpp\">\r\nint remainder = 10 % 3; // remainder = 1\r\n</code></pre>','arithmetic-operators'),(34,'Assignment Operators','<p class=\"fs-4\"><b>1. Simple Assignment Operator (=):</b></p>\r\n<pre class=\"fs-4\"><code class=\"language-cpp\">\r\nint x = 5; // x is assigned the value 5\r\n</code></pre>\r\n\r\n<p class=\"fs-4\"><b>2. Addition Assignment Operator (+=):</b></p>\r\n<pre class=\"fs-4\"><code class=\"language-cpp\">\r\nint y = 10;\r\ny += 3; // y is assigned the value 10 + 3 = 13\r\n</code></pre>\r\n\r\n<p class=\"fs-4\"><b>3. Subtraction Assignment Operator (-=):</b></p>\r\n<pre class=\"fs-4\"><code class=\"language-cpp\">\r\nint z = 8;\r\nz -= 2; // z is assigned the value 8 - 2 = 6\r\n</code></pre>\r\n\r\n<p class=\"fs-4\"><b>4. Multiplication Assignment Operator (*=):</b></p>\r\n<pre class=\"fs-4\"><code class=\"language-cpp\">\r\nint a = 4;\r\na *= 3; // a is assigned the value 4 * 3 = 12\r\n</code></pre>\r\n\r\n<p class=\"fs-4\"><b>5. Division Assignment Operator (/=):</b></p>\r\n<pre class=\"fs-4\"><code class=\"language-cpp\">\r\nint b = 16;\r\nb /= 4; // b is assigned the value 16 / 4 = 4\r\n</code></pre>\r\n\r\n<p class=\"fs-4\"><b>6. Modulus Assignment Operator (%=):</b></p>\r\n<pre class=\"fs-4\"><code class=\"language-cpp\">\r\nint c = 17;\r\nc %= 5; // c is assigned the value 17 % 5 = 2\r\n</code></pre>','assignment-operators'),(35,'Comparison Operators','<p class=\"fs-4\"><b>1. Equality (==):</b></p>\r\n<p class=\"fs-4\">If two values are equal, the expression is true.</p>\r\n\r\n<p class=\"fs-4\"><b>2. Inequality (!=):</b></p>\r\n<p class=\"fs-4\">If two values are not equal, the expression is true.</p>\r\n\r\n<p class=\"fs-4\"><b>3. Greater Than (>):</b></p>\r\n<p class=\"fs-4\">If the value on the left is greater than the value on the right, the expression is true.</p>\r\n\r\n<p class=\"fs-4\"><b>4. Less Than (<):</b></p>\r\n<p class=\"fs-4\">If the value on the left is less than the value on the right, the expression is true.</p>\r\n\r\n<p class=\"fs-4\"><b>5. Greater Than or Equal To (>=):</b></p>\r\n<p class=\"fs-4\">If the value on the left is greater than or equal to the value on the right, the expression is true.</p>\r\n\r\n<p class=\"fs-4\"><b>6. Less Than or Equal To (<=):</b></p>\r\n<p class=\"fs-4\">If the value on the left is less than or equal to the value on the right, the expression is true.</p>\r\n\r\n\r\n\r\n\r\n','comparison-operators'),(36,'Increment and Decrement Operators','<p class=\"fs-4\">\r\nIncrement (++) and Decrement (--) Operators: Used to increase or decrease the value of a variable by one.\r\n</p>\r\n\r\n<pre class=\"fs-4\"><code class=\"language-cpp\">\r\nint x = 5;\r\nx++; // x becomes 6\r\nint y = 10;\r\ny--; // y becomes 9\r\n</code></pre>','increment-and-decrement-operators'),(37,'Getting a value from the user and printing this value to the screen','<p class=\"fs-4\">\r\n<b>1. Getting Input from the User:</b><br>\r\nTo get input from the user, we use <code>std::cin</code>. This is the standard input stream in C++ and is typically used to get input from the keyboard.\r\n<ul>\r\n  <li>First, we need to declare a variable to store the value.</li>\r\n  <li>Then, we use <code>std::cout</code> to ask for the value to be entered by the user.</li>\r\n  <li>We assign the value entered by the user to our variable using <code>std::cin</code>.</li>\r\n</ul>\r\n</p>\r\n\r\n<p class=\"fs-4\">\r\n<b>2. Printing Value to the Screen:</b><br>\r\nTo print the value we obtained from the user to the screen, we use <code>std::cout</code>.\r\n<ul>\r\n  <li>When printing the value of a variable to the screen, we use the << operator.</li>\r\n</ul>\r\n</p>\r\n\r\n<p class=\"fs-4\">\r\n<b>Note:</b> Remember that we need to include the <code>&lt;iostream&gt;</code> library to perform these operations.\r\n</p>\r\n\r\n<p class=\"fs-4\">\r\n<b>Example C++ program:</b>\r\n</p>\r\n\r\n<pre class=\"fs-4\"><code class=\"language-cpp\">\r\n#include &lt;iostream&gt;\r\n\r\nint main() {\r\n    // 1. Getting an integer value from the user\r\n    int number;\r\n    std::cout &lt;&lt; \"Please enter an integer: \"; // Ask for input from the user\r\n    std::cin &gt;&gt; number; // Assign the value entered by the user to the \'number\' variable\r\n\r\n    // 2. Printing the value obtained from the user to the screen\r\n    std::cout &lt;&lt; \"The value you entered: \" &lt;&lt; number &lt;&lt; std::endl; // Print the value of the \'number\' variable to the screen\r\n\r\n    return 0;\r\n}\r\n</code></pre>','getting-a-value-from-the-user-and-printing-this-value-to-the-screen'),(38,'If-else Condition','<p class=\"fs-4\">\r\nIn C++ programming, it allows different operations to be performed depending on whether a specific condition is true or false. This structure is used to control the flow of the program. The basic structure of the if-else condition:\r\n</p>\r\n\r\n<pre class=\"fs-4\"><code class=\"language-cpp\">\r\nif (condition) {\r\n    // Operations to be performed if the condition is true\r\n} else {\r\n    // Operations to be performed if the condition is false\r\n}\r\n</code></pre>\r\n\r\n<p class=\"fs-4\">\r\n<code>if (condition)</code>: First, a specific condition is specified. If this condition is true, the operations inside the if block are performed. If the condition is false, the if block is skipped, and the else block is checked.\r\n<br>\r\n<code>else</code>: If the condition inside the if block is false, the operations inside the else block are performed. This block is optional and is skipped if the condition is true.\r\n</p>\r\n\r\n<p class=\"fs-4\">\r\n<b>Example C++ program:</b>\r\n</p>\r\n\r\n<pre class=\"fs-4\"><code class=\"language-cpp\">\r\n#include &lt;iostream&gt;\r\n\r\nint main() {\r\n    int number;\r\n    std::cout &lt;&lt; \"Enter a number: \";\r\n    std::cin &gt;&gt; number;\r\n\r\n    if (number &gt; 0) {\r\n        std::cout &lt;&lt; \"The number you entered is positive.\" &lt;&lt; std::endl;\r\n    } else {\r\n        std::cout &lt;&lt; \"The number you entered is negative or zero.\" &lt;&lt; std::endl;\r\n    }\r\n\r\n    return 0;\r\n}\r\n</code></pre>\r\n</html>','if-else-condition'),(39,'Switch-case Statement','<p class=\"fs-4\">\r\nIt is a control structure that allows branching of a condition based on different values. The switch-case structure is an alternative representation of an if-else statement. It is commonly used when different operations need to be performed based on different values of a variable.\r\n</p>\r\n\r\n<pre class=\"fs-4\"><code class=\"language-cpp\">\r\nswitch (expression) {\r\n    case value1:\r\n        // If the expression is equal to value1, this block is executed\r\n        break;\r\n    case value2:\r\n        // If the expression is equal to value2, this block is executed\r\n        break;\r\n    // Other case statements can be added here\r\n    default:\r\n        // When the expression does not match any of the above case statements, this block is executed\r\n}\r\n</code></pre>\r\n\r\n<p class=\"fs-4\">\r\n<code>switch (expression):</code> Specifies the expression to be checked. This expression is usually the value of a variable.\r\n<br>\r\n<code>case value1:</code> If the expression is equal to value1, this block is executed.\r\n<br>\r\n<code>case value2:</code> If the expression is equal to value2, this block is executed.\r\n<br>\r\n<code>default:</code> When the expression does not match any of the above case statements, i.e., if the expression is not equal to any value, this block is executed. The default block is optional.\r\n<br>\r\n<code>break:</code> It is found at the end of each case block and allows exiting from the switch-case structure. If the break statement is omitted, the subsequent case blocks will also be executed.\r\n</p>\r\n\r\n<p class=\"fs-4\">\r\n<b>Example C++ program:</b>\r\n</p>\r\n\r\n<pre class=\"fs-4\"><code class=\"language-cpp\">\r\n#include &lt;iostream&gt;\r\n\r\nint main() {\r\n    int number;\r\n    std::cout &lt;&lt; \"Enter a number: \";\r\n    std::cin &gt;&gt; number;\r\n\r\n    switch (number) {\r\n        case 1:\r\n            std::cout &lt;&lt; \"The number you entered is equal to 1.\" &lt;&lt; std::endl;\r\n            break;\r\n        case 2:\r\n            std::cout &lt;&lt; \"The number you entered is equal to 2.\" &lt;&lt; std::endl;\r\n            break;\r\n        case 3:\r\n            std::cout &lt;&lt; \"The number you entered is equal to 3.\" &lt;&lt; std::endl;\r\n            break;\r\n        default:\r\n            std::cout &lt;&lt; \"The number you entered is not equal to 1, 2, or 3.\" &lt;&lt; std::endl;\r\n            break;\r\n    }\r\n\r\n    return 0;\r\n}\r\n</code></pre>','switch-case-statement'),(40,'Usage of Logical Operators in Conditions','<p class=\"fs-4\">\r\nThey are used to evaluate the correctness of conditions and expressions.\r\n</p>\r\n\r\n<ol class=\"fs-4\">\r\n  <li><b>And (&&):</b> If both conditions are true, the expression is true. Otherwise, the expression is false.\r\n    <br>Example:\r\n    <pre><code class=\"language-cpp\">\r\nint x = 5;\r\nint y = 10;\r\nif (x > 0 && y < 20) {\r\n    // This condition is true because both conditions are true.\r\n}\r\n    </code></pre>\r\n  </li>\r\n\r\n  <li><b>Or (||):</b> If at least one condition is true, the expression is true. If both conditions are false, the expression is false.\r\n    <br>Example:\r\n    <pre><code class=\"language-cpp\">\r\nint a = 3;\r\nint b = 7;\r\nif (a == 3 || b == 5) {\r\n    // This condition is true because the value of a is 3.\r\n}\r\n    </code></pre>\r\n  </li>\r\n\r\n  <li><b>Not (!):</b> It takes the opposite of the condition. If true, it becomes false, if false, it becomes true.\r\n    <br>Example:\r\n    <pre><code class=\"language-cpp\">\r\nint c = 8;\r\nif (!(c < 5)) {\r\n    // This condition is true because the value of c is not less than 5.\r\n}\r\n    </code></pre>\r\n  </li>\r\n</ol>','usage-of-logical-operators-in-conditions'),(41,'Nested if Statements','<p class=\"fs-4\">\r\nNested if statements, or if statements within if statements, refer to the use of one if block inside another if block. This structure is used to control multiple levels of specific conditions. Nested if statements are often used in situations where more complex conditions need to be checked. The basic structure is as follows:\r\n</p>\r\n\r\n<pre><code class=\"language-cpp fs-5\">\r\nif (condition1) {\r\n    // If condition1 is true, this block executes\r\n    if (condition2) {\r\n        // If both condition1 and condition2 are true, this block executes\r\n        // Operations\r\n    }\r\n    else {\r\n        // If condition1 is true but condition2 is false, this block executes\r\n        // Operations\r\n    }\r\n}\r\nelse {\r\n    // If condition1 is false, this block executes\r\n    // Operations\r\n}\r\n</code></pre>\r\n\r\n<p class=\"fs-4\">\r\nIn this structure, another if statement is used inside an if statement. The outer if block checks a condition. If this condition is true, the inner if block is executed, and another condition is checked inside it. The inner if block can be executed or not depending on the condition of the outer if block.\r\n</p>\r\n\r\n<p class=\"fs-4\">\r\n<b>Example C++ program:</b>\r\n</p>\r\n\r\n<pre><code class=\"language-cpp fs-5\">\r\n#include &lt;iostream&gt;\r\n\r\nint main() {\r\n    int grade;\r\n    std::cout &lt;&lt; \"Enter your grade: \";\r\n    std::cin &gt;&gt; grade;\r\n\r\n    if (grade &gt;= 0 && grade &lt;= 100) { // Check if the grade is in the valid range\r\n        if (grade &gt;= 90) {\r\n            std::cout &lt;&lt; \"Your grade: A\" &lt;&lt; std::endl;\r\n        } else if (grade &gt;= 80) {\r\n            std::cout &lt;&lt; \"Your grade: B\" &lt;&lt; std::endl;\r\n        } else if (grade &gt;= 70) {\r\n            std::cout &lt;&lt; \"Your grade: C\" &lt;&lt; std::endl;\r\n        } else if (grade &gt;= 60) {\r\n            std::cout &lt;&lt; \"Your grade: D\" &lt;&lt; std::endl;\r\n        } else {\r\n            std::cout &lt;&lt; \"Your grade: F\" &lt;&lt; std::endl;\r\n        }\r\n    } else {\r\n        std::cout &lt;&lt; \"Invalid grade entered.\" &lt;&lt; std::endl;\r\n    }\r\n\r\n    return 0;\r\n}\r\n</code></pre>\r\n\r\n','nested-if-statements'),(43,'For Loop','<p class=\"fs-4\">\r\nThe for loop is a loop structure used to repeat a certain operation a certain number of times or within a certain range. It provides a convenient and readable structure for initializing a loop variable, checking a condition, and updating the loop using an increment/decrement expression. This can be very useful when you want to repeat a specific operation a certain number of times.\r\n</p>\r\n\r\n<p class=\"fs-4\">\r\nIts basic structure is as follows:\r\n</p>\r\n\r\n<pre><code class=\"language-cpp fs-5\">\r\nfor (initial value; condition; increment/decrement) {\r\n    // Loop body: Operations to be performed in each iteration\r\n}\r\n</code></pre>\r\n\r\n<p class=\"fs-4\">\r\nWhere:\r\n</p>\r\n\r\n<ul class=\"fs-4\">\r\n  <li><b>Initial value:</b> It is the initial value of the loop. It runs only once before the loop starts.</li>\r\n  <li><b>Condition:</b> It is the condition checked in each iteration. The loop continues as long as this condition is true. When the condition becomes false, the loop terminates.</li>\r\n  <li><b>Increment/decrement:</b> It is an expression used in each iteration of the loop to update the loop variable. This expression is used to update the value of the loop variable.</li>\r\n</ul>\r\n\r\n\r\n\r\n<pre><code class=\"language-cpp fs-5\">\r\n#include &lt;iostream&gt;\r\n\r\nint main() {\r\n    // Print numbers from 0 to 4 to the screen\r\n    for (int i = 0; i < 5; ++i) {\r\n        std::cout &lt;&lt; i &lt;&lt; \" \";\r\n    }\r\n    std::cout &lt;&lt; std::endl;\r\n\r\n    return 0;\r\n}\r\n</code></pre>\r\n\r\n<p class=\"fs-4\">\r\nIn this example, the variable i is initially set to 0. The loop continues as long as the variable i is less than 5. In each iteration, the variable i is incremented (++i). Inside the loop body, the value of i is printed to the screen in each iteration. As a result, numbers from 0 to 4 are printed to the screen.\r\n</p>','for-loop'),(44,'While Loop','<p class=\"fs-4\">\r\nThe while loop is a loop structure used to repeat an operation as long as a certain condition is true. It initially checks the condition, and as long as the condition is true, it repeatedly executes the loop body. The while loop is useful when you want to repeat a loop body based on a certain condition. If the condition becomes false at any time, the loop terminates and exits. Therefore, you should ensure that the condition is always true; otherwise, an infinite loop may occur.\r\n</p>\r\n\r\n<p class=\"fs-4\">\r\nIts basic structure is as follows:\r\n</p>\r\n\r\n<pre><code class=\"language-cpp fs-5\">\r\nwhile (condition) {\r\n    // Loop body: Operations to be performed as long as the condition is true\r\n}\r\n</code></pre>\r\n\r\n\r\n\r\n<pre><code class=\"language-cpp fs-5\">\r\n#include &lt;iostream&gt;\r\n\r\nint main() {\r\n    int counter = 0;\r\n\r\n    // Run the loop as long as the counter value is less than 5\r\n    while (counter < 5) {\r\n        std::cout << \"Counter value: \" << counter << std::endl;\r\n        counter++; // Increment the counter value in each iteration\r\n    }\r\n\r\n    return 0;\r\n}\r\n</code></pre>\r\n\r\n\r\n<p class=\"fs-4\">\r\nIn this example, the variable counter is initially set to 0. The while loop continues as long as the counter variable is less than 5. In each iteration, the value of the counter variable is printed to the screen, and then it is incremented by one. As a result, the loop prints numbers from 0 to 4 to the screen.\r\n</p>','while-loop'),(45,'Do-While Loop','<p class=\"fs-4\">\r\nThe do-while loop is similar to the while loop, but the loop body is executed at least once, and then the condition is checked. Therefore, the do-while loop is useful when you want to perform an operation at least once. The do-while loop ensures that the loop body runs at least once. Unlike the while loop, the condition in the do-while loop is checked after the loop body.\r\n</p>\r\n\r\n<p class=\"fs-4\">\r\nIts basic structure is as follows:\r\n</p>\r\n\r\n<pre><code class=\"language-cpp fs-5\">\r\ndo {\r\n    // Loop body: Operations to be performed before checking the condition\r\n} while (condition);\r\n</code></pre>\r\n\r\n\r\n\r\n<pre><code class=\"language-cpp fs-5\">\r\n#include &lt;iostream&gt;\r\n\r\nint main() {\r\n    int counter = 0;\r\n\r\n    // Run the loop as long as the counter value is less than 5\r\n    do {\r\n        std::cout << \"Counter value: \" << counter << std::endl;\r\n        counter++; // Increment the counter value in each iteration\r\n    } while (counter < 5);\r\n\r\n    return 0;\r\n}\r\n</code></pre>\r\n\r\n\r\n<p class=\"fs-4\">\r\nIn this example, the variable counter is initially set to 0. The do-while loop executes the loop body (here, printing a value to the screen) at least once, and then repeats the loop as long as the value of the counter variable is less than 5. In each iteration, the value of the counter variable is printed to the screen, and then it is incremented by one. As a result, the loop prints numbers from 0 to 4 to the screen.\r\n</p>','do-while-loop'),(46,'Definition and Usage of Arrays','<body>\r\n\r\n<p class=\"fs-4\">Arrays are data structures used in C++ programming to store multiple data elements. An array is used to store multiple data elements of the same type in a single variable. Each element can be accessed with an index number within the array.</p>\r\n\r\n<p class=\"fs-4\"><b>Definition of Arrays:</b></p>\r\n<p class=\"fs-4\">The definition of an array is made with the array type, array name, and array size. For example, an array of 5 integers can be defined as follows:</p>\r\n<pre><code class=\"language-cpp fs-5\">int array[5]; // An array of 5 integers</code></pre>\r\n<p class=\"fs-4\">This definition creates an array named \'array\' that can store 5 integer values.</p>\r\n\r\n<p class=\"fs-4\"><b>Usage of Arrays:</b></p>\r\n<p class=\"fs-4\">To access an array, indices are used. Indices start from 0 and are sequentially numbered up to one less than the size of the array. For example, to access the array defined above:</p>\r\n<pre><code class=\"language-cpp fs-5\">array[0] = 10; // Assigns the value 10 to the first element of the array\r\narray[1] = 20; // Assigns the value 20 to the second element of the array</code></pre>\r\n<p class=\"fs-4\">To access and use the elements of the array, indices are used. For example, the elements of the array can be printed to the screen using a loop:</p>\r\n<pre><code class=\"language-cpp fs-5\">for (int i = 0; i < 5; ++i) {\r\n    std::cout << \"array[\" << i << \"] = \" << array[i] << std::endl;\r\n}</code></pre>\r\n<p class=\"fs-4\">This loop sequentially prints each element of the array to the screen using the index \'i\'.</p>\r\n\r\n<p class=\"fs-4\"><b>Initialization:</b></p>\r\n<p class=\"fs-4\">After defining arrays, you can initialize them with initial values:</p>\r\n<pre><code class=\"language-cpp fs-5\">int array[5] = {10, 20, 30, 40, 50}; // Array definition with initial values</code></pre>\r\n\r\n<p class=\"fs-4\">Arrays are useful for storing multiple data elements of the same type. However, once an array is defined, its size cannot be changed, meaning the number of elements cannot be altered after the array is created.</p>\r\n\r\n</body>','definition-and-usage-of-arrays'),(47,'Definition and Usage of String Data Type','<body>\r\n\r\n<p class=\"fs-4\">String is a data type used to represent text data. In C++, the string data type is used to manipulate character strings in a more convenient and flexible way. The string data type is defined in the <string> header file.</p>\r\n\r\n<p class=\"fs-4\"><b>Definition of String:</b></p>\r\n<p class=\"fs-4\">String can be thought of as an array, but it consists of characters. To declare a string, a variable name is used with the string type.</p>\r\n<pre><code class=\"language-cpp fs-5\">#include &lt;string&gt;\r\n\r\nstd::string name = \"Ahmet\";\r\n</code></pre>\r\n<p class=\"fs-4\">In the above example, a string variable named \'name\' is declared and initialized with the value \"Ahmet\".</p>\r\n\r\n<p class=\"fs-4\"><b>Usage of String:</b></p>\r\n<p class=\"fs-4\">Simple assignment operator (=) can be used to assign character strings to string variables or to other string variables. Additionally, concatenation operations can be performed between strings.</p>\r\n<pre><code class=\"language-cpp fs-5\">std::string first_name = \"Mehmet\";\r\nstd::string last_name = \"YÄ±lmaz\";\r\nstd::string full_name = first_name + \" \" + last_name; // Concatenating two strings</code></pre>\r\n\r\n<p class=\"fs-4\"><b>Length of String:</b></p>\r\n<p class=\"fs-4\">To get the length of a string, the length() or size() functions can be used.</p>\r\n<pre><code class=\"language-cpp fs-5\">std::string text = \"Hello World\";\r\nint length = text.length(); // or text.size();</code></pre>\r\n\r\n<p class=\"fs-4\"><b>Input and Output of String:</b></p>\r\n<p class=\"fs-4\">std::cin is used to get string input from the user. For string output, std::cout is used.</p>\r\n<pre><code class=\"language-cpp fs-5\">#include &lt;iostream&gt;\r\n#include &lt;string&gt;\r\n\r\nint main() {\r\n    std::string name;\r\n    std::cout << \"Enter your name: \";\r\n    std::cin >> name;\r\n\r\n    std::cout << \"Hello, \" << name << \"!\" << std::endl;\r\n\r\n    return 0;\r\n}</code></pre>\r\n\r\n<p class=\"fs-4\">String is a very useful data type for processing text data. With the string data type in C++, you can easily perform many operations related to text. String has many functions, and you will learn them over time. For more detailed information, it is recommended to refer to the official C++ documentation.</p>\r\n\r\n</body>','definition-and-usage-of-string-data-type'),(50,'Array Operations','<body>\r\n    <h1>Array Operations</h1>\r\n\r\n    <h2 class=\"fs-4\">1. Access</h2>\r\n    <p class=\"fs-4\">\r\n        Accessing values in arrays is done using a specific index.\r\n    </p>\r\n    <pre><code class=\"language-cpp fs-5\">\r\n        int array[5] = {10, 20, 30, 40, 50};\r\n        int value = array[2]; // array[2] contains 30\r\n    </code></pre>\r\n\r\n    <h2 class=\"fs-4\">2. Insertion</h2>\r\n    <p class=\"fs-4\">\r\n        Adding values to arrays requires overwriting existing values. Typically, a new array is created to add a new element. Existing elements are copied to the new array, then new elements are added.\r\n    </p>\r\n    <pre><code class=\"language-cpp fs-5\">\r\n        #include &lt;iostream&gt;\r\n\r\n        int main() {\r\n            int array[5] = {10, 20, 30, 40, 50};\r\n            int newArray[6]; // Create a new array\r\n\r\n            // Copy existing array to new array\r\n            for (int i = 0; i &lt; 5; ++i) {\r\n                newArray[i] = array[i];\r\n            }\r\n\r\n            // Add a new element\r\n            newArray[5] = 60;\r\n\r\n            // Print the new array\r\n            for (int i = 0; i &lt; 6; ++i) {\r\n                std::cout &lt;&lt; newArray[i] &lt;&lt; \" \";\r\n            }\r\n            std::cout &lt;&lt; std::endl;\r\n\r\n            return 0;\r\n        }\r\n    </code></pre>\r\n\r\n    <h2 class=\"fs-4\">3. Deletion</h2>\r\n    <p class=\"fs-4\">\r\n        Deleting a specific element in arrays requires removing that element from the array. This is typically done by creating a new array; the element to be deleted is skipped to create the new array.\r\n    </p>\r\n    <pre><code class=\"language-cpp fs-5\">\r\n        #include &lt;iostream&gt;\r\n\r\n        int main() {\r\n            int array[5] = {10, 20, 30, 40, 50};\r\n            int newArray[4]; // Create a new array\r\n\r\n            // Copy existing array to new array (skipping the element to be deleted)\r\n            for (int i = 0, j = 0; i &lt; 5; ++i) {\r\n                if (i != 2) { // Copy elements other than index 2\r\n                    newArray[j++] = array[i];\r\n                }\r\n            }\r\n\r\n            // Print the new array\r\n            for (int i = 0; i &lt; 4; ++i) {\r\n                std::cout &lt;&lt; newArray[i] &lt;&lt; \" \";\r\n            }\r\n            std::cout &lt;&lt; std::endl;\r\n\r\n            return 0;\r\n        }\r\n    </code></pre>\r\n</body>','array-operations'),(51,'String Operation','<body>\r\n\r\n    <h2 class=\"fs-4\">1. Access</h2>\r\n    <p class=\"fs-4\">\r\n        In strings, just like in character arrays, characters are accessed using a specific index.\r\n    </p>\r\n    <pre><code class=\"language-cpp fs-5\">\r\n        std::string text = \"Hello\";\r\n        char character = text[2]; // character contains \'l\'\r\n    </code></pre>\r\n\r\n    <h2 class=\"fs-4\">2. Insertion</h2>\r\n    <p class=\"fs-4\">\r\n        To add new characters to strings, the + operator can be used or the append() function can be used.\r\n    </p>\r\n    <pre><code class=\"language-cpp fs-5\">\r\n        std::string text = \"Hello\";\r\n        text += \" World\"; // text becomes \"Hello World\"\r\n        text.append(\"!\"); // text becomes \"Hello World!\"\r\n    </code></pre>\r\n\r\n    <h2 class=\"fs-4\">3. Deletion</h2>\r\n    <p class=\"fs-4\">\r\n        To delete characters or a substring from strings, the erase() function is used.\r\n    </p>\r\n    <pre><code class=\"language-cpp fs-5\">\r\n        std::string text = \"Hello World!\";\r\n        text.erase(5, 5); // erases 5 characters starting from index 5: \"Hello!\"\r\n    </code></pre>\r\n</body>','string-operation');
/*!40000 ALTER TABLE `topics` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2024-06-02 16:10:56
